// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/server.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "git.codenrock.com/avito-testirovanie-na-backend-1270/cnrprod1725726028-team-79521/zadanie-6105/src/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockTendersRepo is a mock of TendersRepo interface.
type MockTendersRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTendersRepoMockRecorder
}

// MockTendersRepoMockRecorder is the mock recorder for MockTendersRepo.
type MockTendersRepoMockRecorder struct {
	mock *MockTendersRepo
}

// NewMockTendersRepo creates a new mock instance.
func NewMockTendersRepo(ctrl *gomock.Controller) *MockTendersRepo {
	mock := &MockTendersRepo{ctrl: ctrl}
	mock.recorder = &MockTendersRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTendersRepo) EXPECT() *MockTendersRepoMockRecorder {
	return m.recorder
}

// CreateTender mocks base method.
func (m *MockTendersRepo) CreateTender(arg0 models.Tender) (models.Tender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTender", arg0)
	ret0, _ := ret[0].(models.Tender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTender indicates an expected call of CreateTender.
func (mr *MockTendersRepoMockRecorder) CreateTender(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTender", reflect.TypeOf((*MockTendersRepo)(nil).CreateTender), arg0)
}

// EditTender mocks base method.
func (m *MockTendersRepo) EditTender(arg0 int, arg1, arg2 string) (models.Tender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditTender", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Tender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditTender indicates an expected call of EditTender.
func (mr *MockTendersRepoMockRecorder) EditTender(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditTender", reflect.TypeOf((*MockTendersRepo)(nil).EditTender), arg0, arg1, arg2)
}

// GetAllTenders mocks base method.
func (m *MockTendersRepo) GetAllTenders(arg0 string) ([]models.Tender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTenders", arg0)
	ret0, _ := ret[0].([]models.Tender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTenders indicates an expected call of GetAllTenders.
func (mr *MockTendersRepoMockRecorder) GetAllTenders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTenders", reflect.TypeOf((*MockTendersRepo)(nil).GetAllTenders), arg0)
}

// GetTendersByUser mocks base method.
func (m *MockTendersRepo) GetTendersByUser(arg0 string) ([]models.Tender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTendersByUser", arg0)
	ret0, _ := ret[0].([]models.Tender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTendersByUser indicates an expected call of GetTendersByUser.
func (mr *MockTendersRepoMockRecorder) GetTendersByUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTendersByUser", reflect.TypeOf((*MockTendersRepo)(nil).GetTendersByUser), arg0)
}

// RollbackTender mocks base method.
func (m *MockTendersRepo) RollbackTender(arg0, arg1 int) (models.Tender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTender", arg0, arg1)
	ret0, _ := ret[0].(models.Tender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackTender indicates an expected call of RollbackTender.
func (mr *MockTendersRepoMockRecorder) RollbackTender(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTender", reflect.TypeOf((*MockTendersRepo)(nil).RollbackTender), arg0, arg1)
}

// SetTenderStatus mocks base method.
func (m *MockTendersRepo) SetTenderStatus(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTenderStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTenderStatus indicates an expected call of SetTenderStatus.
func (mr *MockTendersRepoMockRecorder) SetTenderStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTenderStatus", reflect.TypeOf((*MockTendersRepo)(nil).SetTenderStatus), arg0, arg1)
}

// MockBidsRepo is a mock of BidsRepo interface.
type MockBidsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBidsRepoMockRecorder
}

// MockBidsRepoMockRecorder is the mock recorder for MockBidsRepo.
type MockBidsRepoMockRecorder struct {
	mock *MockBidsRepo
}

// NewMockBidsRepo creates a new mock instance.
func NewMockBidsRepo(ctrl *gomock.Controller) *MockBidsRepo {
	mock := &MockBidsRepo{ctrl: ctrl}
	mock.recorder = &MockBidsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBidsRepo) EXPECT() *MockBidsRepoMockRecorder {
	return m.recorder
}

// CheckUserPermissionForBid mocks base method.
func (m *MockBidsRepo) CheckUserPermissionForBid(arg0 int, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserPermissionForBid", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserPermissionForBid indicates an expected call of CheckUserPermissionForBid.
func (mr *MockBidsRepoMockRecorder) CheckUserPermissionForBid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserPermissionForBid", reflect.TypeOf((*MockBidsRepo)(nil).CheckUserPermissionForBid), arg0, arg1)
}

// CreateBid mocks base method.
func (m *MockBidsRepo) CreateBid(arg0 models.Bid, arg1 string) (models.Bid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBid", arg0, arg1)
	ret0, _ := ret[0].(models.Bid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBid indicates an expected call of CreateBid.
func (mr *MockBidsRepoMockRecorder) CreateBid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBid", reflect.TypeOf((*MockBidsRepo)(nil).CreateBid), arg0, arg1)
}

// DeclineDecision mocks base method.
func (m *MockBidsRepo) DeclineDecision(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclineDecision", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeclineDecision indicates an expected call of DeclineDecision.
func (mr *MockBidsRepoMockRecorder) DeclineDecision(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclineDecision", reflect.TypeOf((*MockBidsRepo)(nil).DeclineDecision), arg0, arg1)
}

// EditBid mocks base method.
func (m *MockBidsRepo) EditBid(arg0 int, arg1, arg2 string) (models.Bid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditBid", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Bid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditBid indicates an expected call of EditBid.
func (mr *MockBidsRepoMockRecorder) EditBid(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditBid", reflect.TypeOf((*MockBidsRepo)(nil).EditBid), arg0, arg1, arg2)
}

// GetBidsByUser mocks base method.
func (m *MockBidsRepo) GetBidsByUser(arg0 string) ([]models.Bid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBidsByUser", arg0)
	ret0, _ := ret[0].([]models.Bid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBidsByUser indicates an expected call of GetBidsByUser.
func (mr *MockBidsRepoMockRecorder) GetBidsByUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBidsByUser", reflect.TypeOf((*MockBidsRepo)(nil).GetBidsByUser), arg0)
}

// GetBidsForTender mocks base method.
func (m *MockBidsRepo) GetBidsForTender(arg0 int) ([]models.Bid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBidsForTender", arg0)
	ret0, _ := ret[0].([]models.Bid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBidsForTender indicates an expected call of GetBidsForTender.
func (mr *MockBidsRepoMockRecorder) GetBidsForTender(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBidsForTender", reflect.TypeOf((*MockBidsRepo)(nil).GetBidsForTender), arg0)
}

// RollbackBid mocks base method.
func (m *MockBidsRepo) RollbackBid(arg0, arg1 int) (models.Bid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackBid", arg0, arg1)
	ret0, _ := ret[0].(models.Bid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackBid indicates an expected call of RollbackBid.
func (mr *MockBidsRepoMockRecorder) RollbackBid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackBid", reflect.TypeOf((*MockBidsRepo)(nil).RollbackBid), arg0, arg1)
}

// SetBidStatus mocks base method.
func (m *MockBidsRepo) SetBidStatus(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBidStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBidStatus indicates an expected call of SetBidStatus.
func (mr *MockBidsRepoMockRecorder) SetBidStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBidStatus", reflect.TypeOf((*MockBidsRepo)(nil).SetBidStatus), arg0, arg1)
}

// SubmitDecision mocks base method.
func (m *MockBidsRepo) SubmitDecision(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitDecision", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitDecision indicates an expected call of SubmitDecision.
func (mr *MockBidsRepoMockRecorder) SubmitDecision(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitDecision", reflect.TypeOf((*MockBidsRepo)(nil).SubmitDecision), arg0, arg1)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CheckUserPermissionForBid mocks base method.
func (m *MockRepository) CheckUserPermissionForBid(arg0 int, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserPermissionForBid", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserPermissionForBid indicates an expected call of CheckUserPermissionForBid.
func (mr *MockRepositoryMockRecorder) CheckUserPermissionForBid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserPermissionForBid", reflect.TypeOf((*MockRepository)(nil).CheckUserPermissionForBid), arg0, arg1)
}

// CreateBid mocks base method.
func (m *MockRepository) CreateBid(arg0 models.Bid, arg1 string) (models.Bid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBid", arg0, arg1)
	ret0, _ := ret[0].(models.Bid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBid indicates an expected call of CreateBid.
func (mr *MockRepositoryMockRecorder) CreateBid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBid", reflect.TypeOf((*MockRepository)(nil).CreateBid), arg0, arg1)
}

// CreateTender mocks base method.
func (m *MockRepository) CreateTender(arg0 models.Tender) (models.Tender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTender", arg0)
	ret0, _ := ret[0].(models.Tender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTender indicates an expected call of CreateTender.
func (mr *MockRepositoryMockRecorder) CreateTender(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTender", reflect.TypeOf((*MockRepository)(nil).CreateTender), arg0)
}

// DeclineDecision mocks base method.
func (m *MockRepository) DeclineDecision(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeclineDecision", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeclineDecision indicates an expected call of DeclineDecision.
func (mr *MockRepositoryMockRecorder) DeclineDecision(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeclineDecision", reflect.TypeOf((*MockRepository)(nil).DeclineDecision), arg0, arg1)
}

// EditBid mocks base method.
func (m *MockRepository) EditBid(arg0 int, arg1, arg2 string) (models.Bid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditBid", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Bid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditBid indicates an expected call of EditBid.
func (mr *MockRepositoryMockRecorder) EditBid(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditBid", reflect.TypeOf((*MockRepository)(nil).EditBid), arg0, arg1, arg2)
}

// EditTender mocks base method.
func (m *MockRepository) EditTender(arg0 int, arg1, arg2 string) (models.Tender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditTender", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Tender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditTender indicates an expected call of EditTender.
func (mr *MockRepositoryMockRecorder) EditTender(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditTender", reflect.TypeOf((*MockRepository)(nil).EditTender), arg0, arg1, arg2)
}

// GetAllTenders mocks base method.
func (m *MockRepository) GetAllTenders(arg0 string) ([]models.Tender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTenders", arg0)
	ret0, _ := ret[0].([]models.Tender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTenders indicates an expected call of GetAllTenders.
func (mr *MockRepositoryMockRecorder) GetAllTenders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTenders", reflect.TypeOf((*MockRepository)(nil).GetAllTenders), arg0)
}

// GetBidsByUser mocks base method.
func (m *MockRepository) GetBidsByUser(arg0 string) ([]models.Bid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBidsByUser", arg0)
	ret0, _ := ret[0].([]models.Bid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBidsByUser indicates an expected call of GetBidsByUser.
func (mr *MockRepositoryMockRecorder) GetBidsByUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBidsByUser", reflect.TypeOf((*MockRepository)(nil).GetBidsByUser), arg0)
}

// GetBidsForTender mocks base method.
func (m *MockRepository) GetBidsForTender(arg0 int) ([]models.Bid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBidsForTender", arg0)
	ret0, _ := ret[0].([]models.Bid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBidsForTender indicates an expected call of GetBidsForTender.
func (mr *MockRepositoryMockRecorder) GetBidsForTender(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBidsForTender", reflect.TypeOf((*MockRepository)(nil).GetBidsForTender), arg0)
}

// GetTendersByUser mocks base method.
func (m *MockRepository) GetTendersByUser(arg0 string) ([]models.Tender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTendersByUser", arg0)
	ret0, _ := ret[0].([]models.Tender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTendersByUser indicates an expected call of GetTendersByUser.
func (mr *MockRepositoryMockRecorder) GetTendersByUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTendersByUser", reflect.TypeOf((*MockRepository)(nil).GetTendersByUser), arg0)
}

// RollbackBid mocks base method.
func (m *MockRepository) RollbackBid(arg0, arg1 int) (models.Bid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackBid", arg0, arg1)
	ret0, _ := ret[0].(models.Bid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackBid indicates an expected call of RollbackBid.
func (mr *MockRepositoryMockRecorder) RollbackBid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackBid", reflect.TypeOf((*MockRepository)(nil).RollbackBid), arg0, arg1)
}

// RollbackTender mocks base method.
func (m *MockRepository) RollbackTender(arg0, arg1 int) (models.Tender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTender", arg0, arg1)
	ret0, _ := ret[0].(models.Tender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollbackTender indicates an expected call of RollbackTender.
func (mr *MockRepositoryMockRecorder) RollbackTender(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTender", reflect.TypeOf((*MockRepository)(nil).RollbackTender), arg0, arg1)
}

// SetBidStatus mocks base method.
func (m *MockRepository) SetBidStatus(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBidStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBidStatus indicates an expected call of SetBidStatus.
func (mr *MockRepositoryMockRecorder) SetBidStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBidStatus", reflect.TypeOf((*MockRepository)(nil).SetBidStatus), arg0, arg1)
}

// SetTenderStatus mocks base method.
func (m *MockRepository) SetTenderStatus(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTenderStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTenderStatus indicates an expected call of SetTenderStatus.
func (mr *MockRepositoryMockRecorder) SetTenderStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTenderStatus", reflect.TypeOf((*MockRepository)(nil).SetTenderStatus), arg0, arg1)
}

// SubmitDecision mocks base method.
func (m *MockRepository) SubmitDecision(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitDecision", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitDecision indicates an expected call of SubmitDecision.
func (mr *MockRepositoryMockRecorder) SubmitDecision(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitDecision", reflect.TypeOf((*MockRepository)(nil).SubmitDecision), arg0, arg1)
}
